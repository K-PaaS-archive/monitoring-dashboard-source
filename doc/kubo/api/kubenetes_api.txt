

1. kubectl create -f helloworld.yml  (Create Pod)


---------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: hello-node
  labels:
    app: hello-node
spec:
  containers:
  - name: gs-spring-boot-docker
    image: springio/gs-spring-boot-docker
    ports:
    - name: nodejs-port
      containerPort: 8080
---------------------------------


API :POST https://182.252.135.135:8443/api/v1/namespaces/${NameSpacename}/pods (Post)
Request Body:
{  
   "apiVersion":"v1",
   "kind":"Pod",
   "metadata":{  
      "labels":{  
         "app":"hello-node"
      },
      "name":"hello-node",
      "namespace":"default"
   },
   "spec":{  
      "containers":[  
         {  
            "image":"springio/gs-spring-boot-docker",
            "name":"gs-spring-boot-docker",
            "ports":[  
               {  
                  "containerPort":8080,
                  "name":"nodejs-port"
               }
            ]
         }
      ]
   }
}

Response Body:
{
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
        "creationTimestamp": "2018-08-29T05:08:44Z",
        "labels": {
            "app": "hello-node"
        },
        "name": "hello-node",
        "namespace": "default",
        "resourceVersion": "1143915",
        "selfLink": "/api/v1/namespaces/default/pods/hello-node",
        "uid": "9a5cb7f0-ab49-11e8-8506-fa163e653c02"
    },
    "spec": {
        "containers": [
            {
                "image": "springio/gs-spring-boot-docker",
                "imagePullPolicy": "Always",
                "name": "gs-spring-boot-docker",
                "ports": [
                    {
                        "containerPort": 8080,
                        "name": "nodejs-port",
                        "protocol": "TCP"
                    }
                ],
                "resources": {},
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "volumeMounts": [
                    {
                        "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                        "name": "default-token-kzp45",
                        "readOnly": true
                    }
                ]
            }
        ],
        "dnsPolicy": "ClusterFirst",
        "priority": 0,
        "restartPolicy": "Always",
        "schedulerName": "default-scheduler",
        "securityContext": {},
        "serviceAccount": "default",
        "serviceAccountName": "default",
        "terminationGracePeriodSeconds": 30,
        "tolerations": [
            {
                "effect": "NoExecute",
                "key": "node.kubernetes.io/not-ready",
                "operator": "Exists",
                "tolerationSeconds": 300
            },
            {
                "effect": "NoExecute",
                "key": "node.kubernetes.io/unreachable",
                "operator": "Exists",
                "tolerationSeconds": 300
            }
        ],
        "volumes": [
            {
                "name": "default-token-kzp45",
                "secret": {
                    "defaultMode": 420,
                    "secretName": "default-token-kzp45"
                }
            }
        ]
    },
    "status": {
        "phase": "Pending",
        "qosClass": "BestEffort"
    }
}



2. kubectl get pod 

API : GET https://182.252.135.135:8443/api/v1/namespaces/${namespaceName}/pods?limit=500
Request Body:


{
    "apiVersion": "v1",
    "items": [
        {
            "apiVersion": "v1",
            "kind": "Pod",
            "metadata": {
                "creationTimestamp": "2018-08-29T05:08:44Z",
                "labels": {
                    "app": "hello-node"
                },
                "name": "hello-node",
                "namespace": "default",
                "resourceVersion": "1143949",
                "selfLink": "/api/v1/namespaces/default/pods/hello-node",
                "uid": "9a5cb7f0-ab49-11e8-8506-fa163e653c02"
            },
            "spec": {
                "containers": [
                    {
                        "image": "springio/gs-spring-boot-docker",
                        "imagePullPolicy": "Always",
                        "name": "gs-spring-boot-docker",
                        "ports": [
                            {
                                "containerPort": 8080,
                                "name": "nodejs-port",
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "volumeMounts": [
                            {
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                                "name": "default-token-kzp45",
                                "readOnly": true
                            }
                        ]
                    }
                ],
                "dnsPolicy": "ClusterFirst",
                "nodeName": "vm-44ff8ba8-740a-4bca-b021-6d409679ed87",
                "priority": 0,
                "restartPolicy": "Always",
                "schedulerName": "default-scheduler",
                "securityContext": {},
                "serviceAccount": "default",
                "serviceAccountName": "default",
                "terminationGracePeriodSeconds": 30,
                "tolerations": [
                    {
                        "effect": "NoExecute",
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "tolerationSeconds": 300
                    },
                    {
                        "effect": "NoExecute",
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "tolerationSeconds": 300
                    }
                ],
                "volumes": [
                    {
                        "name": "default-token-kzp45",
                        "secret": {
                            "defaultMode": 420,
                            "secretName": "default-token-kzp45"
                        }
                    }
                ]
            },
            "status": {
                "conditions": [
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2018-08-29T05:08:44Z",
                        "status": "True",
                        "type": "Initialized"
                    },
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2018-08-29T05:09:02Z",
                        "status": "True",
                        "type": "Ready"
                    },
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": null,
                        "status": "True",
                        "type": "ContainersReady"
                    },
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2018-08-29T05:08:44Z",
                        "status": "True",
                        "type": "PodScheduled"
                    }
                ],
                "containerStatuses": [
                    {
                        "containerID": "docker://08fff10d467f2b4a8957210ff8592f97d5fd481850bd468b673cf06223dc5229",
                        "image": "springio/gs-spring-boot-docker:latest",
                        "imageID": "docker-pullable://springio/gs-spring-boot-docker@sha256:879e37e16545d45391f30e5559dface8d90636ab330b546fa53d3ae79dfed545",
                        "lastState": {},
                        "name": "gs-spring-boot-docker",
                        "ready": true,
                        "restartCount": 0,
                        "state": {
                            "running": {
                                "startedAt": "2018-08-29T05:09:01Z"
                            }
                        }
                    }
                ],
                "hostIP": "10.0.10.9",
                "phase": "Running",
                "podIP": "10.200.70.54",
                "qosClass": "BestEffort",
                "startTime": "2018-08-29T05:08:44Z"
            }
        }
    ],
    "kind": "List",
    "metadata": {
        "resourceVersion": "",
        "selfLink": ""
    }
}


3. kubectl get pod {pod_name}
API :GET https://182.252.135.135:8443/api/v1/namespaces/{namespace}/pods/{pod_name}
responseBody:
{
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
        "creationTimestamp": "2018-08-29T05:25:50Z",
        "labels": {
            "app": "hello-node"
        },
        "name": "hello-node",
        "namespace": "default",
        "resourceVersion": "1145562",
        "selfLink": "/api/v1/namespaces/default/pods/hello-node",
        "uid": "fddd4e02-ab4b-11e8-8506-fa163e653c02"
    },
    "spec": {
        "containers": [
            {
                "image": "springio/gs-spring-boot-docker",
                "imagePullPolicy": "Always",
                "name": "gs-spring-boot-docker",
                "ports": [
                    {
                        "containerPort": 8080,
                        "name": "nodejs-port",
                        "protocol": "TCP"
                    }
                ],
                "resources": {},
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "volumeMounts": [
                    {
                        "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                        "name": "default-token-kzp45",
                        "readOnly": true
                    }
                ]
            }
        ],
        "dnsPolicy": "ClusterFirst",
        "nodeName": "vm-017b77b4-d4a0-4c54-bcb5-60d2dab16a89",
        "priority": 0,
        "restartPolicy": "Always",
        "schedulerName": "default-scheduler",
        "securityContext": {},
        "serviceAccount": "default",
        "serviceAccountName": "default",
        "terminationGracePeriodSeconds": 30,
        "tolerations": [
            {
                "effect": "NoExecute",
                "key": "node.kubernetes.io/not-ready",
                "operator": "Exists",
                "tolerationSeconds": 300
            },
            {
                "effect": "NoExecute",
                "key": "node.kubernetes.io/unreachable",
                "operator": "Exists",
                "tolerationSeconds": 300
            }
        ],
        "volumes": [
            {
                "name": "default-token-kzp45",
                "secret": {
                    "defaultMode": 420,
                    "secretName": "default-token-kzp45"
                }
            }
        ]
    },
    "status": {
        "conditions": [
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2018-08-29T05:25:50Z",
                "status": "True",
                "type": "Initialized"
            },
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2018-08-29T05:25:55Z",
                "status": "True",
                "type": "Ready"
            },
            {
                "lastProbeTime": null,
                "lastTransitionTime": null,
                "status": "True",
                "type": "ContainersReady"
            },
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2018-08-29T05:25:50Z",
                "status": "True",
                "type": "PodScheduled"
            }
        ],
        "containerStatuses": [
            {
                "containerID": "docker://c35dc976508e908172756869f9903d8c010a9eebe506d19c2aab9b0c361e9368",
                "image": "springio/gs-spring-boot-docker:latest",
                "imageID": "docker-pullable://springio/gs-spring-boot-docker@sha256:879e37e16545d45391f30e5559dface8d90636ab330b546fa53d3ae79dfed545",
                "lastState": {},
                "name": "gs-spring-boot-docker",
                "ready": true,
                "restartCount": 0,
                "state": {
                    "running": {
                        "startedAt": "2018-08-29T05:25:55Z"
                    }
                }
            }
        ],
        "hostIP": "10.0.10.4",
        "phase": "Running",
        "podIP": "10.200.59.47",
        "qosClass": "BestEffort",
        "startTime": "2018-08-29T05:25:50Z"
    }
}


4. kubectl delete -f helloworld.yml
API: DELETE https://182.252.135.135:8443/api/v1/namespaces/{namespace}/pods/{podname}

response Body: 200 OK

5. kubectl create -f helloworld-service.yml

API: POST https://182.252.135.135:8443/api/v1/namespaces/{nameSpace}/services
RequestBody: 
{  
   "apiVersion":"v1",
   "kind":"Service",
   "metadata":{  
      "name":"hello-node-svc",
      "namespace":"default"
   },
   "spec":{  
      "ports":[  
         {  
            "name":"http",
            "nodePort":30036,
            "port":80,
            "protocol":"TCP",
            "targetPort":8080
         }
      ],
      "selector":{  
         "app":"hello-node"
      },
      "type":"LoadBalancer"
   }
}

ResponseBody:
{
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
        "creationTimestamp": "2018-08-29T05:52:19Z",
        "name": "hello-node-svc",
        "namespace": "default",
        "resourceVersion": "1148225",
        "selfLink": "/api/v1/namespaces/default/services/hello-node-svc",
        "uid": "b114d4d6-ab4f-11e8-8506-fa163e653c02"
    },
    "spec": {
        "clusterIP": "10.100.200.214",
        "externalTrafficPolicy": "Cluster",
        "ports": [
            {
                "name": "http",
                "nodePort": 30036,
                "port": 80,
                "protocol": "TCP",
                "targetPort": 8080
            }
        ],
        "selector": {
            "app": "hello-node"
        },
        "sessionAffinity": "None",
        "type": "LoadBalancer"
    },
    "status": {
        "loadBalancer": {}
    }
}




