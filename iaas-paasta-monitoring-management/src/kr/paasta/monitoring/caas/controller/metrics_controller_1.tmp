package controller

import (
	"fmt"
	"github.com/jinzhu/gorm"
	"github.com/tidwall/gjson"
	"io/ioutil"
	"net/http"
	"kr/paasta/monitoring/caas/util"
	"strconv"
)

type MetricController struct {
	txn   *gorm.DB
}

type clusterAvg struct {
	PodUsage    string
	CpuUsage    string
	MemoryUsage string
	DiskUsage   string
}

func (s *MetricController) GetClusterAvg(w http.ResponseWriter, r *http.Request) {
	// Metrics Call func
	podUsageData, _ 	:= strconv.ParseFloat(GetPodUsage(),4)
	cpuUsageData, _  	:= strconv.ParseFloat(GetCpuUsage(),5)
	memoryUsageData, _  := strconv.ParseFloat(GetMemoryUsage(),6)
	diskUsageData, _  	:= strconv.ParseFloat(GetDiskUsage(),7)

	// Struct Metrics Values Setting
	podUsage 	:= fmt.Sprintf("%.2f",podUsageData)
	cpuUsage 	:= fmt.Sprintf("%.2f",cpuUsageData)
	memoryUsage := fmt.Sprintf("%.2f",memoryUsageData)
	diskUsage 	:= fmt.Sprintf("%.2f",diskUsageData)

	clusterAvgData := &clusterAvg{PodUsage: podUsage,CpuUsage: cpuUsage,MemoryUsage: memoryUsage,DiskUsage: diskUsage,}
	util.RenderJsonResponse(clusterAvgData, w)
}


func  GetPodUsage() string {
	var matricValue string

	//pod Usage Metric
	proUrl := "http://35.238.64.203:9090/api/v1/query?query=sum(kube_pod_info)/sum(kube_node_status_allocatable_pods{node=~'.*'})"
	resp, err := http.Get(proUrl)

	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	// 결과 출력
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	str2 := string(data)

	jsonString1 := gjson.Get(str2, "data.result.0.value.1")

	matricValue = jsonString1.String()

	return matricValue
}


func  GetCpuUsage() string {
	//cpu Usage Metric
	proUrl := "http://35.238.64.203:9090/api/v1/query?query=sum(rate(container_cpu_usage_seconds_total{id='/'}[10m]))/sum(machine_cpu_cores)*100"

	resp, err := http.Get(proUrl)

	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	// 결과 출력
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	str2 := string(data)

	jsonString1 := gjson.Get(str2, "data.result.0.value.1")

	return jsonString1.String()
}


func  GetMemoryUsage() string {
	//memoory Usage Metric
	proUrl := "http://35.238.64.203:9090/api/v1/query?query=sum(container_memory_working_set_bytes{id='/'})/sum(machine_memory_bytes)*100"
	resp, err := http.Get(proUrl)

	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	// 결과 출력
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	str2 := string(data)

	jsonString1 := gjson.Get(str2, "data.result.0.value.1")

	return jsonString1.String()
}


func  GetDiskUsage() string {
	//disk Usage Metric
	proUrl := "http://35.238.64.203:9090/api/v1/query?query=sum(container_fs_usage_bytes{id='/'})/sum(container_fs_limit_bytes{id='/'})*100"
	resp, err := http.Get(proUrl)

	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	// 결과 출력
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	str2 := string(data)

	jsonString1 := gjson.Get(str2, "data.result.0.value.1")

	return jsonString1.String()
}
